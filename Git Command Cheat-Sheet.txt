# when you first start git you need to configure name & email-id
git config --global user.name "user_name" (w/o quotes)
git config --global user.email "email-id" (w/o quotes)

# to create a new empty file -> use "touch" command
touch file_name.py / touch file_name.txt (similarly you can create such empty files)

STEPS:
1. git init
2. git status
3. git add file_name / git add -A
4. git status
5. git commit -m "message"
6. git status
7. to use direct commit -> git commit -a -m "message" (not recommended)

# to initialize the git
git init (this creates a new git repository)

# to check status of the files present in folder
git status

# to add files to git
git add "file_name"

# to add all the files
git add --all / git add -A

# to commit the files for tracking
git commit
1. when you run git commit -> it opens up vim editor
2. you need to press I(i) to enter the comment for the particular commit
3. once to entered the commit press ESC
4. after that enter -> :wq

the shortcut for this is
git commit -m "your_message_for_commit"

# to retrieve the file when you last commited
git checkout "file_name"

# to retrieve all the files from the last commit
git checkout -f

# to get the history of all commits
git log

# to compare your file from working directory to staging
git diff

# to compare your file from working directory to last commited
git diff --staged

# to remove file from the staged (file will be present in disk)
git rm --cached "file_name"

# to remove file from disk + git
git rm "file_name"

# to ignore files from git tracking
touch .gitignore
1. open .gitignore file
2. add the file name you want to ignore
3. when using git add -> only .gitignore file will be added and the names in .gitignore will not be tracked
4. to ignore a particular extension of file -> inside gitignore write *.log (for all log file with log extension -> all adds the files from all folders)
5. to ignore only the files in the directory of .gitignore -> use /*.py (all files with .py only where .gitignore is there -> not in folder)
6. to ignore a particular folder -> add "folder_name/" (dont forget the "/" at the end)

# to view list of branch
git branch

# to create new branch (branch helps to saves the code from master branch -> master is the main branch)
git branch "branch_name" (you still remain in master branch, but new branch is created)
git checkout "branch_name" (to switch between branches)
git checkout -b "branch_name" (to create new branch and at the same time also switch)

now whatever changes you make in new branch does not affect master branch.
if your new branch is perfect and want to merge with master branch
1. go to your master branch -> git checkout master
2. git merge "branch_name" (make sure you are in master branch)

# to delete branch
git branch -d "branch_name" (works only when branch is fully merged)
to force delete the branch use -> git branch -D "branch_name"

# to add your git to remote
copy the code from the github website when you create the repository
git remote add origin website_url... (will be in this format, also make sure you have selected SSH rather than HTTP)

# to view pull and push of remote
git remote -v

# how to push your git
git push -u "where_remote" "which_branch" -> git push origin master
1. this will give error as you need to setup SSH keys and GPG keys
2. go to your repository setting and select SSH and GPG keys
3. just follow the procedure to add the SSH keys (no need to add GPG keys)